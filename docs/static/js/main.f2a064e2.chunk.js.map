{"version":3,"sources":["switch-network.jpg","download-metamask.png","coin.jpg","loading.svg","SwitchNetworkNotice.jsx","DownloadMetaMaskButton.jsx","AddTokenPanel.jsx","EditTokenPanel.jsx","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","nameForNetwork","network","name","concat","SwitchNetworkNotice","props","net","tokenNet","react_default","a","createElement","src","switchNetwork","alt","DownloadMetaMaskButton","href","className","downloadButton","metaMarkAddress","AddTokenPanel","_this","Object","classCallCheck","this","_props$tokenName","tokenName","_props$tokenSymbol","tokenSymbol","_props$tokenDecimals","tokenDecimals","_props$tokenAddress","tokenAddress","_props$tokenImage","tokenImage","_props$tokenNet","_props$message","message","_props$errorMessage","errorMessage","_props$net","_super","call","state","search","window","location","params","queryString","parse","key","updateNet","setState","_callee","provider","eth","realNet","_regeneratorRuntime","wrap","_context","prev","next","detectEthereumProvider","sent","Eth","net_version","stop","context","error","_this2","_this$state","src_DownloadMetaMaskButton","src_SwitchNetworkNotice","logo","Table_default","TableBody_default","TableRow_default","TableCell_default","Button_default","onClick","_this2$state","etherscanLink","createAccountLink","_ref","asyncToGenerator","mark","_callee2","event","_context2","sendAsync","method","type","options","address","symbol","decimals","image","id","Math","round","random","err","added","console","log","_x","apply","arguments","Typography_default","gutterBottom","noWrap","Link","to","Component","schema","title","properties","default","required","EditTokenPanel","keys","map","TextField_default","errormessage","label","margin","visitForm","opts","forEach","el","document","querySelector","value","stringify","MainContent","BrowserRouter","basename","process","HashRouter","hashType","Switch","Route","path","component","ErrorContent","App","_useState","useState","_useState2","slicedToArray","isProviderLoaded","setProvider","_useState3","_useState4","isLoading","setLoading","App_regeneratorRuntime","loadingSvg","App_MainContent","App_ErrorContent","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","src_App_0","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f2a064e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/switch-network.8fcbc12d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/download-metamask.14c35a62.png\";","module.exports = __webpack_public_path__ + \"static/media/coin.d28f2529.jpg\";","module.exports = __webpack_public_path__ + \"static/media/loading.cc261999.svg\";","import React from 'react';\nimport switchNetwork from './switch-network.jpg';\n\nconst nameForNetwork = (network) => {\n  let name = ''\n  switch (network) {\n    case '1': // main net\n      name = 'The Main Ethereum Network'\n      break\n    case '2': // legacy ropsten test net\n      name = 'The OLD Ropsten Test Network'\n      break\n    case '3': // ropsten test net\n      name = 'The Ropsten Test Network'\n      break\n    case '4': // rinkeby test net\n      name = 'The Rinkeby Test Network'\n      break\n    case '42': // kovan test net\n      name = 'The Kovan Test Network'\n      break\n    default:\n      name = `Network #${network}`\n  }\n  return name;\n}\n\nconst SwitchNetworkNotice = (props) => {\n\n  const { net, tokenNet } = props\n\n  return (\n    <div>\n      <h1>Add Token</h1>\n      <h2>Wrong Network Detected</h2>\n      <p>You have {nameForNetwork(net)} selected, but this token requires {nameForNetwork(tokenNet)}. Please switch the current network in your web3 client.</p>\n      <p>You can switch your current network in MetaMask like this:</p>\n      <img src={switchNetwork} alt=\"Network can be switched in the MetaMask network menu in the top right hand corner.\" />\n    </div>\n  )\n}\n\n\n\nexport default SwitchNetworkNotice;\n\n","import React from 'react';\nimport downloadButton from './download-metamask.png';\n\nconst DownloadMetaMaskButton = () => {\n  return (\n    <a href=\"https://metamask.io\">\n      <img className=\"downloadButton\" src={downloadButton} alt=\"Download MetaMask\" />\n    </a>\n  )\n}\n\nexport default DownloadMetaMaskButton\n\n","import React, { Component } from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider'\nimport SwitchNetworkNotice from './SwitchNetworkNotice'\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Typography from '@material-ui/core/Typography';\nimport DownloadMetaMaskButton from './DownloadMetaMaskButton';\nimport Eth from 'ethjs-query';\nimport etherscanLink from 'etherscan-link';\nimport { Link } from 'react-router-dom'\nimport logo from './coin.jpg';\nimport queryString from 'querystringify'\n\nconst metaMarkAddress = '0x617b3f8050a0bd94b6b1da02b4384ee5b4df13f4';\n\nclass AddTokenPanel extends Component {\n\n  constructor(props) {\n    const {\n      tokenName = 'MetaMarks',\n      tokenSymbol = 'MARK',\n      tokenDecimals = 18,\n      tokenAddress = metaMarkAddress,\n      tokenImage = 'https://pbs.twimg.com/profile_images/802481220340908032/M_vde_oi_400x400.jpg',\n      tokenNet = '1',\n      message = '',\n      errorMessage = '',\n      net = '1',\n    } = props\n\n    super()\n    this.state = {\n      tokenName,\n      tokenSymbol,\n      tokenDecimals,\n      tokenAddress,\n      tokenImage,\n      tokenNet,\n      message,\n      errorMessage,\n      net,\n    }\n\n    const search = window.location.search\n    const params = queryString.parse(search)\n\n    for (let key in params) {\n      this.state[key] = params[key]\n    }\n\n    this.updateNet()\n  }\n\n  componentDidMount() {\n    const search = this.props.location.search\n    const params = queryString.parse(search)\n    this.setState(params)\n  }\n\n  async updateNet() {\n    const provider = await detectEthereumProvider()\n    const eth = new Eth(provider)\n    const realNet = await eth.net_version()\n    this.setState({ net: realNet })\n  }\n\n  render(props, context) {\n    const {\n      tokenName,\n      tokenSymbol,\n      tokenDecimals,\n      tokenNet,\n      net,\n      tokenImage,\n      tokenAddress,\n      message,\n      errorMessage,\n    } = this.state\n\n    let error\n    if (errorMessage !== '') {\n      error = <p className=\"errorMessage\">\n        There was a problem adding this token to your wallet. Make sure you have the latest version of MetaMask installed!\n        <DownloadMetaMaskButton />\n      </p>\n    }\n\n    if (tokenNet !== net) {\n      return <SwitchNetworkNotice net={net} tokenNet={tokenNet} />\n    }\n\n    return (\n      <div className=\"values\">\n        <header className=\"App-header\">\n          <img src={tokenImage || logo} className=\"logo\" alt=\"Coin\" />\n          <h1 className=\"App-title\">Watch {tokenName}</h1>\n        </header>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>Symbol</TableCell>\n              <TableCell>{tokenSymbol}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Decimals</TableCell>\n              <TableCell>{tokenDecimals}</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n\n        <div>\n          <Button\n            onClick={() => {\n              const { tokenAddress, net } = this.state\n              window.location.href = etherscanLink.createAccountLink(tokenAddress, net)\n            }}\n            href={etherscanLink.createAccountLink(tokenAddress, net)}\n          >View on Etherscan</Button>\n\n          <Button\n            onClick={async (event) => {\n              const provider = await detectEthereumProvider()\n              provider.sendAsync({\n                method: 'metamask_watchAsset',\n                params: {\n                  \"type\": \"ERC20\",\n                  \"options\": {\n                    \"address\": tokenAddress,\n                    \"symbol\": tokenSymbol,\n                    \"decimals\": tokenDecimals,\n                    \"image\": tokenImage,\n                  },\n                },\n                id: Math.round(Math.random() * 100000),\n              }, (err, added) => {\n                console.log('provider returned', err, added)\n                if (err || 'error' in added) {\n                  this.setState({\n                    errorMessage: 'There was a problem adding the token.',\n                    message: '',\n                  })\n                  return\n                }\n                this.setState({\n                  message: 'Token added!',\n                  errorMessage: '',\n                })\n              })\n            }}\n          >Watch in Wallet</Button>\n\n        </div>\n\n        <p>{message}</p>\n        {error}\n\n        <div className=\"spacer\"></div>\n\n        <Typography gutterBottom noWrap>\n          {`\n            Create a simple page to watch your token with one click.\n          `}\n        </Typography>\n        <Link to=\"/edit\">\n          <Button>\n            Create Page\n          </Button>\n        </Link>\n\n      </div>\n    )\n  }\n}\n\nexport default AddTokenPanel;\n\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport queryString from 'querystringify'\nimport TextField from '@material-ui/core/TextField';\n\nconst schema = {\n  title: \"Token Details\",\n  properties: {\n    tokenName: {type: \"string\", title: \"Token Name\", default: \"My Token\", required: true},\n    tokenAddress: {type: \"string\", title: \"Token Address\", required: true},\n    tokenSymbol: {type: \"string\", title: \"Token Symbol\", default: \"TKN\", required: true},\n    tokenDecimals: {type: \"number\", title: \"Token Decimals\", default: 18, required: true},\n    tokenNet: {type: \"number\", title: \"Token Network Id\", default: 1, required: true},\n    tokenImage: {type: \"string\", title: \"Token Image URL (optional)\", required: false},\n  }\n};\n\nclass EditTokenPanel extends Component {\n\n  constructor () {\n    super()\n    this.state = {}\n  }\n\n  render() {\n    return (\n      <div className=\"my-form\">\n        <h1>Enter Token Details</h1>\n        <p>To create an easy token-suggesting page.</p>\n\n        <div className=\"form-content\">\n          { Object.keys(schema.properties).map((key) => {\n            return (\n              <div key={key}>\n                <TextField\n                  id={key}\n                  required={schema.properties[key].required}\n                  errormessage={this.state[key + 'Error']}\n                  label={schema.properties[key].title}\n                  margin=\"normal\"\n                />\n              </div>\n            )\n          }) }\n\n          <Button onClick={this.visitForm}>\n            Create Add Token Page\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  visitForm () {\n\n    const opts = {}\n    const keys = ['tokenImage', 'tokenName', 'tokenAddress', 'tokenNet', 'tokenSymbol', 'tokenDecimals']\n\n    keys.forEach((key) => {\n      const el = document.querySelector('#' + key)\n      if (!el) return\n      opts[key] = el.value\n    })\n\n    window.location.href = './add?' + queryString.stringify(opts)\n  }\n}\n\nexport default EditTokenPanel;\n\n","import detectEthereumProvider from '@metamask/detect-provider';\nimport React, { useState } from 'react';\nimport { BrowserRouter, HashRouter, Route, Switch } from 'react-router-dom';\nimport AddTokenPanel from './AddTokenPanel';\nimport './App.css';\nimport DownloadMetaMaskButton from './DownloadMetaMaskButton';\nimport EditTokenPanel from './EditTokenPanel';\nimport loadingSvg from './loading.svg';\n\n\nconst MainContent = () => {\n  return (\n    <div>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <HashRouter hashType=\"noslash\">\n          <Switch>\n            <Route path=\"/edit\" component={EditTokenPanel} />\n            <Route path=\"/add\" component={AddTokenPanel} />\n            <Route path=\"/\" component={AddTokenPanel} />\n          </Switch>\n        </HashRouter>\n      </BrowserRouter>\n    </div>\n  )\n};\n\nconst ErrorContent = () => {\n  return (\n    <div>\n      <div>\n        <h2>You need a web3 browser like MetaMask to use this site and manage cryptocurrencies.</h2>\n        <DownloadMetaMaskButton />\n      </div>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [isProviderLoaded, setProvider] = useState([]);\n  const [isLoading, setLoading] = useState([true]);\n\n  const checkEthereumProvider = async () => {\n    const provider = await detectEthereumProvider()\n    setLoading(false)\n    setProvider(provider)\n  }\n\n  checkEthereumProvider()\n\n  return (\n    <div className=\"App\">\n      {isLoading ? <div><div><img className=\"loading-spinner\" src={loadingSvg} /><h2>Loading.....</h2></div></div>\n        : <div>\n          <a className=\"github-banner\" href=\"https://github.com/MetaMask/Add-Token\"><img src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png\" alt=\"Fork me on GitHub\" /></a>\n\n          {isProviderLoaded ? <MainContent /> : <ErrorContent />}\n\n        </div>}\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}